#include <../net/mac80211/mesh.h>
#include <../net/mac80211/sta_info.h>
#include <../net/mac80211/ieee80211_i.h>


kprobe:mesh_path_assign_nexthop
{
	$path = (struct mesh_path *)arg0;
	$sta = (struct sta_info *)arg1;
	printf("(%s [%d]) mesh_path_assign_nexthop\n", $sta->sdata->name, tid);
	printf("\t%s\n", macaddr($path->dst));
}


kprobe:mesh_path_lookup
{
	$sdata = (struct ieee80211_sub_if_data *)arg0;
	printf("(%s [%d]) mesh_path_lookup\n", $sdata->name, tid);
	printf("\t%s\n", macaddr(arg1));
}


kprobe:mpp_path_lookup
{
	$sdata = (struct ieee80211_sub_if_data *)arg0;
	printf("(%s [%d]) mpp_path_lookup\n", $sdata->name, tid);
	printf("\t%s\n", macaddr(arg1));
}


kprobe:mesh_path_lookup_by_idx
{
	$sdata = (struct ieee80211_sub_if_data *)arg0;
	printf("(%s [%d]) mesh_path_lookup_by_idx\n", $sdata->name, tid);
}


kprobe:mpp_path_lookup_by_idx
{
	$sdata = (struct ieee80211_sub_if_data *)arg0;
	printf("(%s [%d]) mpp_path_lookup_by_idx\n", $sdata->name, tid);
}


kprobe:mesh_path_add_gate
{
	$path = (struct mesh_path *)arg0;
	printf("(%s [%d]) mesh_path_add_gate\n", $path->sdata->name, tid);
	printf("\t%s\n", macaddr($path->dst));
}


kprobe:mesh_gate_num
{
	$sdata = (struct ieee80211_sub_if_data *)arg0;
	printf("(%s [%d]) mesh_gate_num\n", $sdata->name, tid);
}


kprobe:mesh_path_add
{
	$sdata = (struct ieee80211_sub_if_data *)arg0;
	printf("(%s [%d]) mesh_path_add\n", $sdata->name, tid);
	printf("\t%s\n", macaddr(arg1));
}


kprobe:mpp_path_add
{
	$sdata = (struct ieee80211_sub_if_data *)arg0;
	printf("(%s [%d]) mpp_path_add\n", $sdata->name, tid);
	printf("\t%s\n", macaddr(arg1));
}


kprobe:mesh_plink_broken
{
	$sta = (struct sta_info *)arg0;
	printf("(%s [%d]) mesh_plink_broken\n", $sta->sdata->name, tid);
}


kprobe:mesh_path_flush_by_nexthop
{
	$sta = (struct sta_info *)arg0;
	printf("(%s [%d]) mesh_path_flush_by_nexthop\n", $sta->sdata->name, tid);
}

kprobe:mesh_plink_broken
{
	printf("mesh_plink_broken\n");
}

kprobe:mesh_path_flush_by_nexthop
{
	printf("mesh_path_flush_by_nexthop\n");
}

kprobe:mesh_path_flush_by_iface
{
	printf("mesh_path_flush_by_iface\n");
}

kprobe:mesh_path_flush_by_iface
{
	$sdata = (struct ieee80211_sub_if_data *)arg0;
	printf("(%s [%d]) mesh_path_flush_by_iface\n", $sdata->name, tid);
}


kprobe:mesh_path_del
{
	$sdata = (struct ieee80211_sub_if_data *)arg0;
	printf("(%s [%d]) mesh_path_del\n", $sdata->name, tid);
	printf("\t%s\n", macaddr(arg1));
}


kprobe:mesh_path_tx_pending
{
	$path = (struct mesh_path *)arg0;
	printf("(%s [%d]) mesh_path_tx_pending\n", $path->sdata->name, tid);
}


kprobe:mesh_path_send_to_gates
{
	$path = (struct mesh_path *)arg0;
	printf("(%s [%d]) mesh_path_send_to_gates\n", $path->sdata->name, tid);
}


kprobe:mesh_path_discard_frame
{
	$sdata = (struct ieee80211_sub_if_data *)arg0;
	printf("(%s [%d]) mesh_path_discard_frame\n", $sdata->name, tid);
}


kprobe:mesh_path_flush_pending
{
	$path = (struct mesh_path *)arg0;
	printf("(%s [%d]) mesh_path_flush_pending\n", $path->sdata->name, tid);
}


kprobe:mesh_path_fix_nexthop
{
	$path = (struct mesh_path *)arg0;
	printf("(%s [%d]) mesh_path_fix_nexthop\n", $path->sdata->name, tid);
	printf("\t%s\n", macaddr($path->dst));
}


kprobe:mesh_pathtbl_init
{
	$sdata = (struct ieee80211_sub_if_data *)arg0;
	printf("(%s [%d]) mesh_pathtbl_init\n", $sdata->name, tid);
}


kprobe:mesh_path_expire
{
	$sdata = (struct ieee80211_sub_if_data *)arg0;
	printf("(%s [%d]) mesh_path_expire\n", $sdata->name, tid);
}


kprobe:mesh_pathtbl_unregister
{
	$sdata = (struct ieee80211_sub_if_data *)arg0;
	printf("(%s [%d]) mesh_pathtbl_unregister\n", $sdata->name, tid);
}


kprobe:mesh_nexthop_resolve
{
	$sdata = (struct ieee80211_sub_if_data *)arg0;
	printf("(%s [%d]) mesh_nexthop_resolve\n", $sdata->name, tid);
}


kprobe:hwmp_route_info_get
{
	$sdata = (struct ieee80211_sub_if_data *)arg0;
	printf("(%s [%d]) hwmp_route_info_get\n", $sdata->name, tid);
}
