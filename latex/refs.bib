@techreport{ieee80211,
	title = {{IEEE} {Standard} for {Information} {Technology}--{Telecommunications} and {Information} {Exchange} between {Systems} - {Local} and {Metropolitan} {Area} {Networks}--{Specific} {Requirements} - {Part} 11: {Wireless} {LAN} {Medium} {Access} {Control} ({MAC}) and {Physical} {Layer} ({PHY}) {Specifications}},
	shorttitle = {{IEEE} {Standard} for {Information} {Technology}--{Telecommunications} and {Information} {Exchange} between {Systems} - {Local} and {Metropolitan} {Area} {Networks}--{Specific} {Requirements} - {Part} 11},
	url = {https://ieeexplore.ieee.org/document/9363693/},
	urldate = {2022-09-26},
	institution = {IEEE},
	doi = {10.1109/IEEESTD.2021.9363693},
	note = {ISBN: 9781504472838},
}

@inproceedings{meshopor,
    author = {Mihail L. Sichitiu},
    title = {Wireless mesh networks: Opportunities and challenges},
    booktitle = {Proceedings of World Wireless Congress},
    year = {2005},
    url = {https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.476.8560&rep=rep1&type=pdf}
}

@techreport{aodv,
	title = {Ad hoc {On}-{Demand} {Distance} {Vector} ({AODV}) {Routing}},
	url = {https://www.rfc-editor.org/info/rfc3561},
	language = {en},
	number = {RFC3561},
	urldate = {2022-09-27},
	institution = {RFC Editor},
	author = {Perkins, C. and Belding-Royer, E. and Das, S.},
	month = jul,
	year = {2003},
	doi = {10.17487/rfc3561},
	pages = {RFC3561},
}

@misc{ieee80211s,
    title = {IEEE 802.11s},
    note = {\url{https://wireless.wiki.kernel.org/en/developers/Documentation/ieee80211/802.11s}, visited 2022-09-27},
    language = {en},
    urldate = {2022-09-27},
}

@inproceedings{hwmpproa,
	address = {Hammamet, Tunisia},
	title = {Performance evaluation of the {HWMP} proactive tree mode for {IEEE} 802.11s based {Wireless} {Mesh} {Networks}},
	isbn = {978-1-4673-1008-6},
	isbn = {978-1-4673-1007-9},
	isbn = {978-1-4673-1006-2},
	url = {https://ieeexplore.ieee.org/document/6217743},
	doi = {10.1109/ComNet.2012.6217743},
	urldate = {2022-09-27},
	booktitle = {Third {International} {Conference} on {Communications} and {Networking}},
	publisher = {IEEE},
	author = {Guesmia, M. and Guezouri, M. and Mbarek, N.},
	month = mar,
	year = {2012},
	pages = {1--7},
}

@inproceedings{hwmpperf,
	address = {Kuala Lumpur, Malaysia},
	title = {Performance study of hybrid {Wireless} {Mesh} {Protocol} ({HWMP}) for {IEEE} 802.11s {WLAN} mesh networks},
	isbn = {978-1-4673-0479-5},
	isbn = {978-1-4673-0478-8},
	isbn = {978-1-4673-0477-1},
	url = {http://ieeexplore.ieee.org/document/6271309/},
	doi = {10.1109/ICCCE.2012.6271309},
	urldate = {2022-09-27},
	booktitle = {2012 {International} {Conference} on {Computer} and {Communication} {Engineering} ({ICCCE})},
	publisher = {IEEE},
	author = {Bari, S. M. S. and Anwar, F. and Masud, M. H.},
	month = jul,
	year = {2012},
	pages = {712--716},
}

@inproceedings{bpf,
    author = {McCanne, Steven and Jacobson, Van},
    title = {The BSD Packet Filter: A New Architecture for User-Level Packet Capture},
    year = {1993},
    publisher = {USENIX Association},
    address = {USA},
    abstract = {Many versions of Unix provide facilities for user-level packet capture, making possible the use of general purpose workstations for network monitoring. Because network monitors run as user-level processes, packets must be copied across the kernel/user-space protection boundary. This copying can be minimized by deploying a kernel agent called a packet filter, which discards unwanted packets as early as possible. The original Unix packet filter was designed around a stack-based filter evaluator that performs sub-optimally on current RISC CPUs. The BSD Packet Filter (BPF) uses a new, register-based filter evaluator that is up to 20 times faster than the original design. BPF alson uses a straighforward buffering strategy that makes its overall performance up to 100 times faster than Sun's NIT running on the same hardware.},
    booktitle = {Proceedings of the USENIX Winter 1993 Conference Proceedings on USENIX Winter 1993 Conference Proceedings},
    pages = {2},
    numpages = {1},
    location = {San Diego, California},
    series = {USENIX'93}
}

@misc{alexei,
	title = {[{PATCH} net-next] extended {BPF}},
	note = {\url{https://lkml.org/lkml/2013/9/30/627}, visited 2022-09-27},
    language = {en},
    urldate = {2022-09-27},
	month = sep,
	year = {2013},
}

@misc{ebpfio,
    title = {eBPF Documentation},
    note = {\url{https://ebpf.io/what-is-ebpf}, visited 2022-09-27},
    language = {en},
    urldate = {2022-09-27},
}

@misc{sizelimit,
    title = {bpf: increase complexity limit and maximum program size},
    note = {\url{https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=c04c0d2b968ac45d6ef020316808ef6c82325a82}, visited 2022-09-27},
    language = {en},
    urldate = {2022-09-27},
	month = apr,
	year = {2019},
}

@inproceedings{mnwifi,
	address = {Barcelona, Spain},
	title = {Mininet-{WiFi}: {Emulating} software-defined wireless networks},
	isbn = {978-3-901882-77-7},
	shorttitle = {Mininet-{WiFi}},
	url = {http://ieeexplore.ieee.org/document/7367387/},
	doi = {10.1109/CNSM.2015.7367387},
	urldate = {2022-09-29},
	booktitle = {2015 11th {International} {Conference} on {Network} and {Service} {Management} ({CNSM})},
	publisher = {IEEE},
	author = {Fontes, Ramon R. and Afzal, Samira and Brito, Samuel H. B. and Santos, Mateus A. S. and Rothenberg, Christian Esteve},
	month = nov,
	year = {2015},
	pages = {384--389},
}

@misc{lwm,
    title = {A thorough introduction to eBPF},
    note = {\url{https://lwn.net/Articles/740157/}, visited 2022-09-27},
    language = {en},
    urldate = {2022-09-27},
}

@article{xdp,
	title = {Fast {Packet} {Processing} with {eBPF} and {XDP}: {Concepts}, {Code}, {Challenges}, and {Applications}},
	volume = {53},
	issn = {0360-0300, 1557-7341},
	shorttitle = {Fast {Packet} {Processing} with {eBPF} and {XDP}},
	url = {https://dl.acm.org/doi/10.1145/3371038},
	doi = {10.1145/3371038},
	abstract = {Extended Berkeley Packet Filter (eBPF) is an instruction set and an execution environment inside the Linux kernel. It enables modification, interaction, and kernel programmability at runtime. eBPF can be used to program the eXpress Data Path (XDP), a kernel network layer that processes packets closer to the NIC for fast packet processing. Developers can write programs in C or P4 languages and then compile to eBPF instructions, which can be processed by the kernel or by programmable devices (e.g., SmartNICs). Since its introduction in 2014, eBPF has been rapidly adopted by major companies such as Facebook, Cloudflare, and Netronome. Use cases include network monitoring, network traffic manipulation, load balancing, and system profiling. This work aims to present eBPF to an inexpert audience, covering the main theoretical and fundamental aspects of eBPF and XDP, as well as introducing the reader to simple examples to give insight into the general operation and use of both technologies.},
	language = {en},
	number = {1},
	urldate = {2022-09-27},
	journal = {ACM Computing Surveys},
	author = {Vieira, Marcos A. M. and Castanho, Matheus S. and Pacífico, Racyus D. G. and Santos, Elerson R. S. and Júnior, Eduardo P. M. Câmara and Vieira, Luiz F. M.},
	month = jan,
	year = {2021},
	pages = {1--36},
}

@article{ebpfeg1,
	title = {Low {Overhead} {TCP}/{UDP} {Socket}-based {Tracing} for {Discovering} {Network} {Services} {Dependencies}},
	volume = {30},
	issn = {1882-6652},
	url = {https://www.jstage.jst.go.jp/article/ipsjjip/30/0/30_260/_article},
	doi = {10.2197/ipsjjip.30.260},
	language = {en},
	number = {0},
	urldate = {2022-09-27},
	journal = {Journal of Information Processing},
	author = {Tsubouchi, Yuuki and Furukawa, Masahiro and Matsumoto, Ryosuke},
	year = {2022},
	pages = {260--268},
	file = {Full Text:/home/carlos/Zotero/storage/XZ8H825M/Tsubouchi et al. - 2022 - Low Overhead TCPUDP Socket-based Tracing for Disc.pdf:application/pdf},
}

@article{ebpfeg2,
	title = {Towards {Software} {Defined} {Measurement} in {Data} {Centers}: {A} {Comparative} {Study} of {Designs}, {Implementation}, and {Evaluation}},
	issn = {2168-7161, 2372-0018},
	shorttitle = {Towards {Software} {Defined} {Measurement} in {Data} {Centers}},
	url = {https://ieeexplore.ieee.org/document/9794424/},
	doi = {10.1109/TCC.2022.3181890},
	urldate = {2022-09-27},
	journal = {IEEE Transactions on Cloud Computing},
	author = {Zha, Zili and Wang, An and Guo, Yang and Chen, Songqing},
	year = {2022},
	pages = {1--12},
}

@book{gregg,
	address = {Hoboken},
	edition = {1},
	title = {Bpf performance tools: {Linux} system and application observability},
	isbn = {978-0-13-655482-0},
	shorttitle = {Bpf performance tools},
	publisher = {Pearson Education, Inc},
	author = {Gregg, Brendan},
	year = {2019},
}

@misc{bcc,
    title = {BPF Compiler Collection (BCC)},
    note = {\url{https://github.com/iovisor/bcc/blob/master/README.md}, visited 2022-09-27},
    language = {en},
    urldate = {2022-09-27},
}

@misc{pingcap,
    title = {Why We Switched from BCC to libbpf for Linux BPF Performance Analysis},
    note = {\url{https://www.pingcap.com/blog/why-we-switched-from-bcc-to-libbpf-for-linux-bpf-performance-analysis/}, visited 2022-09-27},
    language = {en},
    urldate = {2022-09-27},
}

@misc{contain,
    title = {Libbpf: A Beginners Guide},
    note = {\url{https://www.containiq.com/post/libbpf}, visited 2022-09-27},
    language = {en},
    urldate = {2022-09-27},
}

@misc{toolsfuture,
    title = {BPF binaries: BTF, CO-RE, and the future of BPF perf tools},
    note = {\url{https://brendangregg.com/blog/2020-11-04/bpf-co-re-btf-libbpf.html}, visited 2022-09-27},
    language = {en},
    urldate = {2022-09-27},
}

@misc{bpftrace,
    title = {bpftrace},
    note = {\url{https://github.com/iovisor/bpftrace/blob/master/README.md}, visited 2022-09-27},
    language = {en},
    urldate = {2022-09-27},
}

@misc{perf,
    title = {Perf Wiki},
    note = {\url{https://perf.wiki.kernel.org/index.php/Main_Page}, visited 2022-09-27},
    language = {en},
    urldate = {2022-09-27},
}

@misc{greggperf,
    title = {perf Examples},
    note = {\url{https://www.brendangregg.com/perf.html}, visited 2022-09-27},
    language = {en},
    urldate = {2022-09-27},
}

@misc{perfring,
    title = {BPF ring buffer},
    note = {\url{https://nakryiko.com/posts/bpf-ringbuf/}, visited 2022-09-27},
    language = {en},
    urldate = {2022-09-27},
}

@misc{libbpf,
    title = {libbpf},
    note = {\url{https://github.com/libbpf/libbpf/blob/master/README.md}, visited 2022-09-27},
    language = {en},
    urldate = {2022-09-27},
}

@misc{coreref,
    title = {BPF CO-RE reference guide},
    note = {\url{https://nakryiko.com/posts/bpf-core-reference-guide/}, visited 2022-09-27},
    language = {en},
    urldate = {2022-09-27},
}

@misc{core,
    title = {BPF CO-RE (Compile Once – Run Everywhere)},
    note = {\url{https://nakryiko.com/posts/bpf-portability-and-co-re/}, visited 2022-09-27},
    language = {en},
    urldate = {2022-09-27},
}

@misc{fbslide,
    title = {BPF CO-RE},
    note = {\url{http://vger.kernel.org/bpfconf2019_talks/bpf-core.pdf}, visited 2022-09-27},
    language = {en},
    urldate = {2022-09-27},
}

@phdthesis{kuber,
  title={A methodology for using eBPF to efficiently monitor network behavior in Linux Kubernetes clusters},
  author={Zavarella, Timothy D},
  year={2022},
  school={Massachusetts Institute of Technology},
  url = {https://dspace.mit.edu/handle/1721.1/145083}
}

@misc{sec,
	title = {{BPFContain}: {Fixing} the {Soft} {Underbelly} of {Container} {Security}},
	shorttitle = {{BPFContain}},
	url = {http://arxiv.org/abs/2102.06972},
	abstract = {Linux containers currently provide limited isolation guarantees. While containers separate namespaces and partition resources, the patchwork of mechanisms used to ensure separation cannot guarantee consistent security semantics. Even worse, attempts to ensure complete coverage results in a mishmash of policies that are difficult to understand or audit. Here we present BPFContain, a new container confinement mechanism designed to integrate with existing container management systems. BPFContain combines a simple yet flexible policy language with an eBPF-based implementation that allows for deployment on virtually any Linux system running a recent kernel. In this paper, we present BPFContain's policy language, describe its current implementation as integrated into docker, and present benchmarks comparing it with current container confinement technologies.},
	urldate = {2022-09-27},
	publisher = {arXiv},
	author = {Findlay, William and Barrera, David and Somayaji, Anil},
	month = feb,
	year = {2021},
	note = {arXiv:2102.06972 [cs]},
	keywords = {Computer Science - Cryptography and Security, Computer Science - Operating Systems},
	file = {arXiv Fulltext PDF:/home/carlos/Zotero/storage/KBH2W4VJ/Findlay et al. - 2021 - BPFContain Fixing the Soft Underbelly of Containe.pdf:application/pdf;arXiv.org Snapshot:/home/carlos/Zotero/storage/Y58FY89T/2102.html:text/html},
}

@misc{elixir,
    title = {Elixir Cross Referencer},
    note = {\url{https://elixir.bootlin.com/linux/v5.15.10/source}, visited 2022-09-27},
    language = {en},
    urldate = {2022-09-27},
}

@misc{bootstrap,
    title = {Building BPF applications with libbpf-bootstrap},
    note = {\url{https://nakryiko.com/posts/libbpf-bootstrap/}, visited 2022-09-27},
    language = {en},
    urldate = {2022-09-27},
}
